PSLSE Quick Start Guide


SETUP:

1) Use "make" to build the code in afu_driver/src.  You will have to first set
	the environment variable VPI_USER_H_DIR.  The value must point to the
	directory that contains the file "vpi_user.h".  This file is provided
	by the Verilog simulator.  "make" will build "veriuser.sl" and
	"libvpi.so" for your simulator.  Refer to your simulator's
	documentation for details on how to use Verilog VPI.  You will only
	need 1 of these files.  Which one will depend on your simulator.

2) Use top.v in afu_driver/verilog as a top level wrapper around your AFU
	Verilog.  Build a model as required for your simulator.

3) Use "make" to compile the code in the directory pslse.  This creates a
	stand-alone executable that mimics the behavior of PSL/CAPP and the
	kernel code that supports it.

4) Use "make" to compile the code in the directory libcxl.  This creates both
	libcxl.a archive library version of libcxl as well as libcxl.so shared
	object version of libcxl.

5) Look at the Makefiles in sample_app for examples of how to build your
	application with libcxl.  If you build with libcxl.so then you don't
	have to re-compile your application if libcxl changes.  You can just
	re-compile libcxl and libcxl.so is picked up at runtime.  However, this
	method requires the the environment variable LD_LIBRARY_PATH contains
	the libcxl path at runtime.  Alternatively, you can compile with
	libcxl.a.  When using libcxl.a you don't need to set any environment
	variables but you do need to recompile your application any time that
	libcxl is recompiled.

6) Use sample_app/app.c as an example to start coding your application with
	libcxl calls using the functions in libcxl.h.

7) Build your application.


RUNNING:

1) Start your simulator with the model that uses top.v as it's top level and
	uses the afu_driver/src code for VPI functions.  You should get a
	message in the simulator output similiar to this:
	"AFU Server is waiting for connection on machine.domain.com:32768"

2) Edit pslse/shim_host.dat to point an AFU at your simulator.  For example:
	afu0.0,machine.domain.com:32768

3) Edit pslse/pslse.parms as desired, or leave the defaults to get started.

4) Start pslse with ./pslse in pslse directory.  You will see a message from
	pslse with a hostname and port similiar to this:
	"INFO : Started PSLSE server, listening on machine.domain.com:16384"

5) In the directory where you will run your application code create the file
	pslse_server.dat and put the host:port provided by pslse in it.
	For example:
	machine.domain.com:16384

6) Start your application.  Run your application multiple times if desired.

7) When run is complete you can stop pslse executable with Ctrl-C to cleanly
	disconnect from the simulator.
